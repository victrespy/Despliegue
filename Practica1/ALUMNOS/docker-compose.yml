services:
  web:
    build: 
      context: ./services/web #la ruta donde esta los archivos
      dockerfile: Dockerfile #el nombre del dockerfile, tiene mas info para que esto no sea tan largo
    #ports:  #(ahora lo gestiona nginx)
    #  - "${WEB_PORT}:80" #la conexion entre puertos / El puerto http por defecto es 80 y https es 443
    expose: 
      - "80" #expone el puerto 80 para que otros servicios puedan acceder a el
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend
      - backend
  db:
    image: mariadb:10.5
    environment: #variables de entorno
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_ROOT_USER: ${MYSQL_ROOT_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
    #(ruta donde tenemos el archivo):(ruta donde queremos que se levante)
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    #para que no se pierdan los datos al reiniciar el contenedor
      - dbdata:/var/lib/mysql #indico la carpeta del contenedor que no se tiene que borrar
    healthcheck: #el objetivo de esto es comprobar que la base de datos este levantada antes de levantar otras cosas
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p\"$${MYSQL_ROOT_PASSWORD}\" --silent"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 20s
    networks:
      - backend
  phpmyadmin:
    image: phpmyadmin:5
    ports:
      - "${PMA_PORT}:80" #el puerto que usa phpmyadmin
    environment: #variables de entorno
      PMA_HOST: db
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    depends_on: #se asegura que la base de datos este levantada antes que phpmyadmin
      - db
    networks:
      - backend

  proxy: # no entiendo bien esto
    image: nginx:alpine
    ports:
      - "80:80"    # Para redirigir HTTP a HTTPS
      - "8443:443"  # Puerto HTTPS, he puesto 8443 para que conecte con el nginx
      - "8080:8080" # Puerto para acceder a la aplicaci칩n en Tomcat
    volumes:
      # Monta la configuraci칩n del proxy
      - ./services/nginx/conf.d:/etc/nginx/conf.d:ro
      # Monta los certificados SSL/TLS
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      web:
        condition: service_started
    networks:
      - frontend
      - backend

  backup:
    image: alpine:3
    environment:
      # Pasamos la contrase침a al script
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} 
    volumes:
      # Montar el script de backup.sh
      - ./scripts/backup.sh:/backup.sh:ro
      # Montar la carpeta de backups (debe ser el mismo nombre que en el script)
      - ./backups:/backups
    command: sh -c "apk add --no-cache mariadb-client && sh /backup.sh"
    depends_on:
      - db
    networks:
      - backend

  tomcat: 
    image: tomcat:9.0
    expose: 
      - "8080" # Exponemos el puerto interno de Tomcat para el proxy
    volumes:
      # Montamos la aplicaci칩n .war en el directorio de webapps de Tomcat
      - ./services/tomcat/webapps/sample.war:/usr/local/tomcat/webapps/sample.war
    networks:
      - backend

#es necesario declarar todos los volumenes creados al final     
volumes:
  dbdata:

#es necesario declarar todas las redes creadas al final
networks:
  frontend:
  backend: